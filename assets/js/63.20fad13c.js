(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{507:function(a,e,s){"use strict";s.r(e);var t=s(35),r=Object(t.a)({},(function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"parser"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parser"}},[a._v("#")]),a._v(" parser")]),a._v(" "),s("p",[a._v("Parses the URL associated with a consultation event (by calling the appropriate parser)")]),a._v(" "),s("h2",{attrs:{id:"headers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#headers"}},[a._v("#")]),a._v(" Headers")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("filter-platforms")]),a._v(" : comma-separated list of platforms to handle. Lines with a matching parser that is not specified are considered irrelevant and filtered out.")]),a._v(" "),s("li",[s("strong",[a._v("allow-domain-wildcards")]),a._v(" : set to "),s("code",[a._v("true")]),a._v(" to allow domain wildcards when looking for parsers associated with a domain. For example, a parser with "),s("code",[a._v("*.google.com")]),a._v(" in its manifest will handle "),s("code",[a._v("google.com")]),a._v(" as well as "),s("code",[a._v("www.google.com")]),a._v(".")])]),a._v(" "),s("h3",{attrs:{id:"example"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[a._v("#")]),a._v(" Example")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("curl")]),a._v(" -v -X POST http://localhost:59599\n  -H "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"ezPAARSE-Middlewares: parser"')]),a._v("\n  -F "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"files[]=@access.log"')]),a._v("\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);